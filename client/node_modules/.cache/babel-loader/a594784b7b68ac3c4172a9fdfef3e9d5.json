{"ast":null,"code":"var _jsxFileName = \"/Users/deeptanshusankhwar/Documents/templates/hackquarantine/TravelBand/src/guitar.js\";\nimport React, { Component } from 'react';\nimport \"./App.css\";\nimport MIDISounds from 'midi-sounds-react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { socket } from './index';\n\nfunction home() {\n  window.location.reload();\n}\n\nclass Guitar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.shiftKey = 0;\n    this.chords = 0;\n    this.base = 60;\n    this.strum = false;\n    this.state = {\n      recordStatus: false,\n      recordTune: {\n        beatPlayed: [],\n        timePlayed: []\n      }\n    };\n    this.mapping = [['a', 45], ['b', 47], ['c', 48], ['d', 50], ['e', 52], ['f', 53], ['g', 55]];\n  }\n\n  playTune(selectedNote) {\n    this.midiSounds.playChordNow(258, selectedNote, 1.5);\n  }\n\n  playNote(key, shiftKey, chords) {\n    let selectedNote = [];\n\n    for (const map of this.mapping) {\n      if (shiftKey === 0) {\n        if (chords === 0) {\n          if (key === map[0]) {\n            if (this.strum) {\n              selectedNote = [map[1], map[1] + 7, map[1] + 12, map[1] + 16, map[1] + 19];\n            } else {\n              selectedNote = [map[1], map[1] + 7, map[1] + 12];\n            }\n\n            return selectedNote;\n          }\n        }\n\n        if (chords === 1) {\n          if (key === map[0]) {\n            if (this.strum) {\n              selectedNote = [map[1], map[1] + 7, map[1] + 12, map[1] + 15, map[1] + 19];\n            } else {\n              selectedNote = [map[1], map[1] + 7, map[1] + 12];\n            }\n\n            return selectedNote;\n          }\n        }\n      }\n\n      if (shiftKey === 1) {\n        this.base = map[1] + 1;\n\n        if (chords === 0) {\n          if (key === map[0]) {\n            if (this.strum) {\n              selectedNote = [this.base, this.base + 7, this.base + 12, this.base + 16, this.base + 19];\n            } else {\n              selectedNote = [this.base, this.base + 7, this.base + 12];\n            }\n\n            return selectedNote;\n          }\n        }\n\n        if (chords === 1) {\n          if (key === map[0]) {\n            if (this.strum) {\n              selectedNote = [this.base, this.base + 7, this.base + 12, this.base + 16, this.base + 19];\n            } else {\n              selectedNote = [this.base, this.base + 7, this.base + 12];\n            }\n\n            return selectedNote;\n          }\n        }\n      }\n    } // for record function, copied from drum.js\n\n\n    if (this.state.recordStatus) {\n      this.state.recordTune.beatPlayed.push(selectedNote);\n      this.state.recordTune.timePlayed.push(new Date());\n      console.log(this.state.recordTune);\n    }\n\n    return [];\n  } //send notes from guitar to server\n\n\n  sendKeysFromGuitar(selectedNote) {\n    socket.emit('sendFromGuitar', selectedNote);\n  }\n\n  playGuitar(key) {\n    if (key === 'shift') {\n      this.shiftKey = (this.shiftKey + 1) % 2;\n    }\n\n    if (key === 'm') {\n      this.chords = (this.chords + 1) % 2;\n    }\n\n    this.strum = !this.strum;\n    this.setState({});\n    const selectedNote = this.playNote(key, this.shiftKey, this.chords);\n\n    if (selectedNote.length != 0) {\n      this.sendKeysFromGuitar(selectedNote);\n      this.playTune(selectedNote);\n    }\n  } //////////////JUST COPIED PASTED RECORD CODE FROM DRUM.JS//////////////////////////\n  //flip record status from recording to not recording and vice versa\n\n\n  toggleRecordStatus() {\n    this.state.recordStatus = !this.state.recordStatus;\n\n    if (this.state.recordStatus) {\n      document.getElementById('record-btn').innerHTML = 'Stop';\n      console.log(this.state.recordStatus);\n    } else {\n      document.getElementById('record-btn').innerHTML = 'Record';\n      document.getElementById('play-btn').disabled = false;\n    }\n  } //asynchronous function that plays the recorded beats at an interval of 1 second each\n\n\n  async wait(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  async playRecord() {\n    console.log('playing');\n\n    for (let i = 0; i < this.state.recordTune.beatPlayed.length; i++) {\n      await this.midiSounds.playChordNow(258, this.state.recordTune.beatPlayed[i], 1.5);\n      console.log(i);\n      await this.wait(this.state.recordTune.timePlayed[i + 1] - this.state.recordTune.timePlayed[i]);\n    }\n  } //delete the previously recorded beats to start recording again from scratch\n\n\n  resetRecord() {\n    this.setState({\n      recordTune: {\n        beatPlayed: [],\n        timePlayed: []\n      }\n    });\n  } //////////////////COPY OF RECORD CODE ENDS HERE////////////////////////////////////////////\n\n\n  render() {\n    //send drum beats played\n    socket.on('receiveFromDrums', key => {\n      this.midiSounds.playDrumsNow(key);\n    }); //send piano played\n\n    socket.on('receiveFromPiano', sound => {\n      this.midiSounds.playChordNow(3, sound.note, sound.length);\n    }); //send guitar played from other users\n\n    socket.on('receiveFromGuitar', selectedNote => {\n      this.midiSounds.playChordNow(258, selectedNote, 1.5);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      id: \"main-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      contentEditable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 25\n      }\n    }, \"Travel Ban\", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: '#9a0415'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 55\n      }\n    }, \"d\")))), /*#__PURE__*/React.createElement(\"nav\", {\n      id: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 33\n      }\n    }, \"Home\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"record-btn\",\n      onClick: this.toggleRecordStatus.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 33\n      }\n    }, \"Record\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"play-btn\",\n      onClick: this.playRecord.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 33\n      }\n    }, \"Play\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: this.resetRecord.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 33\n      }\n    }, \"Reset\"))))), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"App-intro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, \"Press the letter of the chord you want to play ('a' = A major).\"), /*#__PURE__*/React.createElement(KeyboardEventHandler, {\n      handleKeys: ['all'],\n      onKeyEvent: (key, e) => this.playGuitar(key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, \"Click play only after you stop recording!#issue needs to be fixed-->disable playbutton while in recording mode\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 20\n      }\n    }, \"Press shift to change between natural chords and sharp/flats.\")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, \"Current chord type: \", this.shiftKey === 0 ? \"Natural\" : \"Sharp/Flat\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 20\n      }\n    }, \"Press m to toggle between major and minor chords.\")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, \"Current chord setting: \", this.chords === 0 ? \"Major\" : \"Minor\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 20\n      }\n    }, \"Hit Refresh to change instrument\")), /*#__PURE__*/React.createElement(MIDISounds, {\n      ref: ref => this.midiSounds = ref,\n      appElementName: \"root\",\n      instruments: [258, 3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Guitar;","map":{"version":3,"sources":["/Users/deeptanshusankhwar/Documents/templates/hackquarantine/TravelBand/src/guitar.js"],"names":["React","Component","MIDISounds","KeyboardEventHandler","socket","home","window","location","reload","Guitar","shiftKey","chords","base","strum","state","recordStatus","recordTune","beatPlayed","timePlayed","mapping","playTune","selectedNote","midiSounds","playChordNow","playNote","key","map","push","Date","console","log","sendKeysFromGuitar","emit","playGuitar","setState","length","toggleRecordStatus","document","getElementById","innerHTML","disabled","wait","ms","Promise","resolve","setTimeout","playRecord","i","resetRecord","render","on","playDrumsNow","sound","note","color","bind","e","ref"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport \"./App.css\";\nimport MIDISounds from 'midi-sounds-react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport {socket} from './index';\n\nfunction home(){\n    window.location.reload();\n}\n\n\nclass Guitar extends Component {\n    //to track the status of recording\n    shiftKey = 0;\n    chords = 0;\n    base = 60;\n    strum = false;\n\n    state = {\n        recordStatus: false,\n        recordTune: {\n            beatPlayed : [],\n            timePlayed : []\n        }\n    };\n\n    mapping = [\n        ['a', 45],\n        ['b', 47],\n        ['c', 48],\n        ['d', 50],\n        ['e', 52],\n        ['f', 53],\n        ['g', 55],\n    ];\n\n    playTune(selectedNote)    {\n        this.midiSounds.playChordNow(258, selectedNote, 1.5);\n    }\n\n    playNote(key, shiftKey, chords) {\n        let selectedNote = [];\n        for (const map of this.mapping) {\n\n            if (shiftKey === 0) {\n                if (chords === 0) {\n                    if (key === map[0]) {\n                        if (this.strum) {\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12, map[1] + 16, map[1] + 19];\n                        }\n                        else{\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12];\n                        }\n                        return selectedNote;\n                    }\n                }\n                if (chords === 1) {\n                    if (key === map[0]) {\n                        if (this.strum){\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12, map[1] + 15, map[1] + 19];\n                        }\n                        else{\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12];\n                        }\n                        return selectedNote;\n                    }\n                }\n            }\n            if (shiftKey === 1) {\n                this.base = map[1] + 1;\n                if (chords === 0) {\n                    if (key === map[0]) {\n                        if (this.strum) {\n                            selectedNote = [this.base, this.base + 7, this.base + 12, this.base + 16, this.base + 19];\n                        }\n                        else{\n                            selectedNote = [this.base, this.base + 7, this.base + 12];\n                        }\n                        return selectedNote;\n\n                    }\n                }\n                if (chords === 1) {\n                    if (key === map[0]) {\n                        if (this.strum) {\n                            selectedNote = [this.base, this.base + 7, this.base + 12, this.base + 16, this.base + 19];\n                        }\n                        else{\n                            selectedNote = [this.base, this.base + 7, this.base + 12];\n                        }\n                        return selectedNote;\n\n                    }\n                }\n            }\n        }\n\n        // for record function, copied from drum.js\n        if (this.state.recordStatus)  {\n            this.state.recordTune.beatPlayed.push(selectedNote);\n            this.state.recordTune.timePlayed.push(new Date())\n            console.log(this.state.recordTune);\n        }\n        return [];\n    }\n\n    //send notes from guitar to server\n    sendKeysFromGuitar(selectedNote)  {\n        socket.emit('sendFromGuitar', selectedNote);\n    }\n\n\n\n    playGuitar(key){\n        if (key === 'shift') {\n            this.shiftKey = (this.shiftKey + 1) % 2\n        }\n\n        if (key === 'm') {\n            this.chords = (this.chords + 1) % 2\n        }\n\n        this.strum = !this.strum;\n\n        this.setState({});\n\n\n        const selectedNote = this.playNote(key, this.shiftKey, this.chords);\n        if (selectedNote.length != 0)   {\n            this.sendKeysFromGuitar(selectedNote);\n            this.playTune(selectedNote);\n        }\n    }\n\n    //////////////JUST COPIED PASTED RECORD CODE FROM DRUM.JS//////////////////////////\n    //flip record status from recording to not recording and vice versa\n    toggleRecordStatus()  {\n        this.state.recordStatus = !this.state.recordStatus;\n        if (this.state.recordStatus) {\n            document.getElementById('record-btn').innerHTML = 'Stop';\n            console.log(this.state.recordStatus)\n        }\n        else{\n            document.getElementById('record-btn').innerHTML = 'Record';\n            document.getElementById('play-btn').disabled = false;\n        }\n    }\n\n    //asynchronous function that plays the recorded beats at an interval of 1 second each\n    async wait(ms) {\n        return new Promise(resolve => {\n            setTimeout(resolve, ms);\n        });\n    }\n    async playRecord() {\n        console.log('playing');\n        for (let i = 0; i < this.state.recordTune.beatPlayed.length; i++) {\n            await this.midiSounds.playChordNow(258, this.state.recordTune.beatPlayed[i], 1.5);\n            console.log(i);\n            await this.wait(this.state.recordTune.timePlayed[i+1] - this.state.recordTune.timePlayed[i]);\n        }\n    }\n\n\n    //delete the previously recorded beats to start recording again from scratch\n    resetRecord(){\n        this.setState({ recordTune: {\n            beatPlayed: [],\n            timePlayed: []\n          }\n        });\n    }\n    //////////////////COPY OF RECORD CODE ENDS HERE////////////////////////////////////////////\n\n\n    render(){\n        //send drum beats played\n        socket.on('receiveFromDrums', (key) => {\n            this.midiSounds.playDrumsNow(key);\n        });\n\n        //send piano played\n        socket.on('receiveFromPiano', (sound) => {\n            this.midiSounds.playChordNow(3, sound.note, sound.length);\n        });\n\n        //send guitar played from other users\n        socket.on('receiveFromGuitar', (selectedNote) => {\n          this.midiSounds.playChordNow(258, selectedNote, 1.5);\n        });\n\n        return(\n            <div className=\"App\">\n                <header id = 'main-header'>\n                    <div className=\"container\">\n                        <h1 contentEditable>Travel Ban<span style={{color: '#9a0415'}}>d</span></h1>\n                    </div>\n                </header>\n                <nav id=\"navbar\">\n                    <div className=\"container\">\n                        <ul>\n                            <li><a onClick={home}>Home</a></li>\n                            <li><a id=\"record-btn\" onClick={this.toggleRecordStatus.bind(this)}>Record</a></li>\n                            <li><a id=\"play-btn\" onClick={this.playRecord.bind(this)}>Play</a></li>\n                            <li><a onClick={this.resetRecord.bind(this)}>Reset</a></li>\n                        </ul>\n                    </div>\n                </nav>\n                <p className=\"App-intro\">Press the letter of the chord you want to play ('a' = A major).</p>\n                <KeyboardEventHandler handleKeys={['all']} onKeyEvent={(key, e) => this.playGuitar(key)}/>\n                <p>Click play only after you stop recording!#issue needs to be fixed-->disable playbutton while in recording mode</p>\n                <div className='image'></div>\n                <p><h3>Press shift to change between natural chords and sharp/flats.</h3></p>\n                <p>Current chord type: {this.shiftKey === 0 ? \"Natural\" : \"Sharp/Flat\"}</p>\n                <p><h3>Press m to toggle between major and minor chords.</h3></p>\n                <p>Current chord setting: {this.chords === 0 ? \"Major\" : \"Minor\"}</p>\n                <p><h3>Hit Refresh to change instrument</h3></p>\n\n                <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" instruments={[258, 3]}/>\n            </div>\n        )\n    }\n}\n\nexport default Guitar;\n"]},"metadata":{},"sourceType":"module"}