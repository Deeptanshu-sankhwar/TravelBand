{"ast":null,"code":"var _jsxFileName = \"/Users/deeptanshusankhwar/Documents/templates/hackquarantine/TravelBand/src/drum.js\";\nimport React, { Component } from 'react';\nimport './drum.css';\nimport MIDISounds from 'midi-sounds-react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { socket } from './index';\n\nfunction home() {\n  window.location.reload();\n}\n\nclass Drum extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      recordStatus: false,\n      recordTune: {\n        beatPlayed: [],\n        timePlayed: []\n      }\n    };\n    this.selectedDrum = [];\n  }\n\n  //play beat of selected drum component\n  playBeat(selectedDrum) {\n    this.midiSounds.playDrumsNow([selectedDrum]);\n\n    if (this.state.recordStatus) {\n      this.state.recordTune.beatPlayed.push(selectedDrum);\n      this.state.recordTune.timePlayed.push(new Date());\n      console.log(this.state.recordTune);\n    }\n  } //send keys from drum to server\n\n\n  sendKeysFromDrums(key) {\n    socket.emit('sendFromDrums', key);\n  } //handles keyboard input to play beat when corresponding key is pressed\n\n\n  playDrum(key) {\n    switch (key) {\n      case 'f':\n        //Cymbal\n        this.playBeat(110);\n        this.sendKeysFromDrums([110]);\n        break;\n\n      case 'g':\n        //Low Tom\n        this.playBeat(40);\n        this.sendKeysFromDrums([40]);\n        break;\n\n      case 't':\n        //Mid Tom\n        this.playBeat(60);\n        this.sendKeysFromDrums([60]);\n        break;\n\n      case 'b':\n        //Bass Drum\n        this.playBeat(5);\n        this.sendKeysFromDrums([5]);\n        break;\n\n      case 'y':\n        //High Tom\n        this.playBeat(75);\n        this.sendKeysFromDrums([75]);\n        break;\n\n      case 'h':\n        //Snare Drum\n        this.playBeat(15);\n        this.sendKeysFromDrums([15]);\n        break;\n\n      case 'j':\n        //Hi-Hat\n        this.playBeat(35);\n        this.sendKeysFromDrums([35]);\n        break;\n    }\n  } //flip record status from recording to not recording and vice versa\n\n\n  toggleRecordStatus() {\n    this.state.recordStatus = !this.state.recordStatus;\n\n    if (this.state.recordStatus) {\n      document.getElementById('record-btn').innerHTML = 'Stop';\n    } else {\n      document.getElementById('record-btn').innerHTML = 'Record';\n      document.getElementById('play-btn').disabled = false;\n    }\n  } //asynchronous function that plays the recorded beats at an interval of 1 second each\n\n\n  async wait(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  async playRecord() {\n    console.log('playing');\n\n    for (let i = 0; i < this.state.recordTune.beatPlayed.length; i++) {\n      await this.playBeat(this.state.recordTune.beatPlayed[i]);\n      console.log(i);\n      await this.wait(this.state.recordTune.timePlayed[i + 1] - this.state.recordTune.timePlayed[i]);\n    }\n  } //delete the previously recorded beats to start recording again from scratch\n\n\n  resetRecord() {\n    this.setState({\n      recordTune: {\n        beatPlayed: [],\n        timePlayed: []\n      }\n    });\n  } // leaveRoom() {\n  //   socket.leave(\"room-\"+roomno)\n  // }\n\n\n  render() {\n    //send guitar chords played\n    socket.on('receiveFromGuitar', selectedNote => {\n      this.midiSounds.playChordNow(258, selectedNote, 1.5);\n    }); //send piano played\n\n    socket.on('receiveFromPiano', sound => {\n      this.midiSounds.playChordNow(3, sound.note, sound.length);\n    }); //send drum played from other users\n\n    socket.on('receiveFromDrums', key => {\n      this.midiSounds.playDrumsNow(key);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Drum\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyboardEventHandler, {\n      handleKeys: ['all'],\n      onKeyEvent: (key, e) => this.playDrum(key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"header\", {\n      id: \"main-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      contentEditable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, \"Travel Ban\", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: '#9a0415'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 43\n      }\n    }, \"d\")))), /*#__PURE__*/React.createElement(\"nav\", {\n      id: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 19\n      }\n    }, \"Home\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"record-btn\",\n      onClick: this.toggleRecordStatus.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }, \"Record\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      id: \"play-btn\",\n      onClick: this.playRecord.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 19\n      }\n    }, \"Play\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: this.resetRecord.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }, \"Reset\"))))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, \"Click play only after you stop recording!#issue needs to be fixed-->disable playbutton while in recording mode\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"assets/images/drum_kit.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 10\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    }, \"Hit Refresh to change instrument\"), /*#__PURE__*/React.createElement(MIDISounds, {\n      ref: ref => this.midiSounds = ref,\n      appElementName: \"root\",\n      instruments: [258, 3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Drum;","map":{"version":3,"sources":["/Users/deeptanshusankhwar/Documents/templates/hackquarantine/TravelBand/src/drum.js"],"names":["React","Component","MIDISounds","KeyboardEventHandler","socket","home","window","location","reload","Drum","state","recordStatus","recordTune","beatPlayed","timePlayed","selectedDrum","playBeat","midiSounds","playDrumsNow","push","Date","console","log","sendKeysFromDrums","key","emit","playDrum","toggleRecordStatus","document","getElementById","innerHTML","disabled","wait","ms","Promise","resolve","setTimeout","playRecord","i","length","resetRecord","setState","render","on","selectedNote","playChordNow","sound","note","e","color","bind","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './drum.css';\nimport MIDISounds from 'midi-sounds-react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport {socket} from './index';\n\n\n\nfunction home(){\n  window.location.reload();\n}\n\n\nclass Drum extends Component {\n\n  //to track the status of recording\n  state = {\n    recordStatus: false,\n    recordTune: {\n      beatPlayed : [],\n      timePlayed : []\n    },\n  }\n\n  selectedDrum = [];\n\n  //play beat of selected drum component\n  playBeat(selectedDrum) {\n    this.midiSounds.playDrumsNow([selectedDrum]);\n\n    if (this.state.recordStatus)  {\n      this.state.recordTune.beatPlayed.push(selectedDrum);\n      this.state.recordTune.timePlayed.push(new Date())\n      console.log(this.state.recordTune);\n    }\n  }\n\n  //send keys from drum to server\n  sendKeysFromDrums(key)  {\n    socket.emit('sendFromDrums', key);\n  }\n\n  //handles keyboard input to play beat when corresponding key is pressed\n  playDrum(key) {\n\n    switch(key) {\n      case 'f': //Cymbal\n        this.playBeat(110);\n        this.sendKeysFromDrums([110]);\n        break;\n\n      case 'g': //Low Tom\n        this.playBeat(40);\n        this.sendKeysFromDrums([40]);\n        break;\n\n      case 't': //Mid Tom\n        this.playBeat(60);\n        this.sendKeysFromDrums([60]);\n        break;\n\n      case 'b': //Bass Drum\n        this.playBeat(5);\n        this.sendKeysFromDrums([5]);\n        break;\n\n      case 'y': //High Tom\n        this.playBeat(75);\n        this.sendKeysFromDrums([75]);\n        break;\n\n      case 'h': //Snare Drum\n        this.playBeat(15);\n        this.sendKeysFromDrums([15]);\n        break;\n\n      case 'j': //Hi-Hat\n        this.playBeat(35);\n        this.sendKeysFromDrums([35]);\n        break;\n    }\n  }\n\n  //flip record status from recording to not recording and vice versa\n  toggleRecordStatus()  {\n    this.state.recordStatus = !this.state.recordStatus;\n\n    if (this.state.recordStatus) {\n      document.getElementById('record-btn').innerHTML = 'Stop';\n    }\n    else{\n      document.getElementById('record-btn').innerHTML = 'Record';\n      document.getElementById('play-btn').disabled = false;\n    }\n  }\n\n  //asynchronous function that plays the recorded beats at an interval of 1 second each\n  async wait(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n  async playRecord()  {\n    console.log('playing')\n    for (let i = 0; i < this.state.recordTune.beatPlayed.length; i++)  {\n      await this.playBeat(this.state.recordTune.beatPlayed[i]);\n      console.log(i);\n      await this.wait(this.state.recordTune.timePlayed[i+1] - this.state.recordTune.timePlayed[i]);\n    }\n  }\n\n  //delete the previously recorded beats to start recording again from scratch\n  resetRecord() {\n    this.setState({ recordTune: {\n        beatPlayed: [],\n        timePlayed: []\n      }\n    });\n  }\n\n  // leaveRoom() {\n  //   socket.leave(\"room-\"+roomno)\n  // }\n\n  render()  {\n    //send guitar chords played\n    socket.on('receiveFromGuitar', (selectedNote) => {\n      this.midiSounds.playChordNow(258, selectedNote, 1.5);\n    });\n\n    //send piano played\n    socket.on('receiveFromPiano', (sound) => {\n      this.midiSounds.playChordNow(3, sound.note, sound.length);\n    });\n\n    //send drum played from other users\n    socket.on('receiveFromDrums', (key) => {\n        this.midiSounds.playDrumsNow(key);\n    });\n\n    return (\n      <div className=\"Drum\">\n        <KeyboardEventHandler handleKeys={['all']} onKeyEvent={(key, e) => this.playDrum(key)} />\n        <header id = 'main-header'>\n          <div className=\"container\">\n            <h1 contentEditable>Travel Ban<span style={{color: '#9a0415'}}>d</span></h1>\n          </div>\n        </header>\n        <nav id=\"navbar\">\n          <div className=\"container\">\n            <ul>\n              <li><a onClick={home}>Home</a></li>\n              <li><a id=\"record-btn\" onClick={this.toggleRecordStatus.bind(this)}>Record</a></li>\n              <li><a id=\"play-btn\" onClick={this.playRecord.bind(this)}>Play</a></li>\n              <li><a onClick={this.resetRecord.bind(this)}>Reset</a></li>\n              {/* <li><a onClick={this.leaveRoom.bind(this)}>LeaveRoom</a></li> */}\n            </ul>\n          </div>\n        </nav>\n        <p>Click play only after you stop recording!#issue needs to be fixed-->disable playbutton while in recording mode</p>\n\n        <div className='relative'>\n         <img src = \"assets/images/drum_kit.png\"></img>\n        </div>\n\n        <p>Hit Refresh to change instrument</p>\n\n        <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" instruments={[258, 3]} />\n      </div>\n    );\n  }\n}\n\nexport default Drum;\n"]},"metadata":{},"sourceType":"module"}